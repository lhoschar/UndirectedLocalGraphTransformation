Input: gs und gt in Form von adjacency list: unordered_map<int, vector<int>>. Vor Allem gut wenn der Graph einen niedrigen Durchschnittsgrad hat. Space=O(E+V) Insert=O(1) Lookup=O(E/V)
Sei k die Anzahl der Kanten in ePlus.

1. Berechnung von ePlus: Time=O(E * (E / V)) kann reduziert werden auf O(E * ln(E / V)) wenn Set als container verwendet wird. Space=O(k)

2. SteinerForestApproximation: Time=O(k^2 * (E + V)) Space=O(E_Tree + V_Tree)
	2.1 0-1-BFS dauert O(E  V) und wird für jedes k k-mal ausgeführt (anderer SPA?)
	2.2 Berechnung einer Baumstruktur aus markierten Kanten O(E_Tree + V_Tree) weil DFS auf unordered_map<int, unordered_set<int>>

3. Zwei mal den Forest mit DFS traversieren. Time=O(E + V) Space=O(1)
	3.1 Wird benötigt um den Algo Output zu generieren.
	3.2 Alle Terminals mit den zufällig gewählten root Knoten verbinden (DFS auf Forest)
	3.3 Introductions ausgeben (O(k))
	3.4 Alle Verbindungen wieder löschen (DFS auf Forest)
